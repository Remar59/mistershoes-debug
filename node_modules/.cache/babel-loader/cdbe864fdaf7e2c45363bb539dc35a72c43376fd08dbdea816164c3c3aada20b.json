{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"useIntersection\", {\n  enumerable: true,\n  get: function () {\n    return useIntersection;\n  }\n});\nconst _react = require(\"react\");\nconst _requestidlecallback = require(\"./request-idle-callback\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n  const id = {\n    root: options.root || null,\n    margin: options.rootMargin || \"\"\n  };\n  const existing = idList.find(obj => obj.root === id.root && obj.margin === id.margin);\n  let instance;\n  if (existing) {\n    instance = observers.get(existing);\n    if (instance) {\n      return instance;\n    }\n  }\n  const elements = new Map();\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const callback = elements.get(entry.target);\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n      if (callback && isVisible) {\n        callback(isVisible);\n      }\n    });\n  }, options);\n  instance = {\n    id,\n    observer,\n    elements\n  };\n  idList.push(id);\n  observers.set(id, instance);\n  return instance;\n}\nfunction observe(element, callback, options) {\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  elements.set(element, callback);\n  observer.observe(element);\n  return function unobserve() {\n    elements.delete(element);\n    observer.unobserve(element);\n    // Destroy observer when there's nothing left to watch:\n    if (elements.size === 0) {\n      observer.disconnect();\n      observers.delete(id);\n      const index = idList.findIndex(obj => obj.root === id.root && obj.margin === id.margin);\n      if (index > -1) {\n        idList.splice(index, 1);\n      }\n    }\n  };\n}\nfunction useIntersection(param) {\n  let {\n    rootRef,\n    rootMargin,\n    disabled\n  } = param;\n  const isDisabled = disabled || !hasIntersectionObserver;\n  const [visible, setVisible] = (0, _react.useState)(false);\n  const elementRef = (0, _react.useRef)(null);\n  const setElement = (0, _react.useCallback)(element => {\n    elementRef.current = element;\n  }, []);\n  (0, _react.useEffect)(() => {\n    if (hasIntersectionObserver) {\n      if (isDisabled || visible) return;\n      const element = elementRef.current;\n      if (element && element.tagName) {\n        const unobserve = observe(element, isVisible => isVisible && setVisible(isVisible), {\n          root: rootRef == null ? void 0 : rootRef.current,\n          rootMargin\n        });\n        return unobserve;\n      }\n    } else {\n      if (!visible) {\n        const idleCallback = (0, _requestidlecallback.requestIdleCallback)(() => setVisible(true));\n        return () => (0, _requestidlecallback.cancelIdleCallback)(idleCallback);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled, rootMargin, rootRef, visible, elementRef.current]);\n  const resetVisible = (0, _react.useCallback)(() => {\n    setVisible(false);\n  }, []);\n  return [setElement, visible, resetVisible];\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":"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","names":["useIntersection","hasIntersectionObserver","IntersectionObserver","observers","Map","idList","createObserver","options","id","root","margin","rootMargin","existing","find","obj","instance","get","elements","observer","entries","forEach","entry","callback","target","isVisible","isIntersecting","intersectionRatio","push","set","observe","element","unobserve","delete","size","disconnect","index","findIndex","splice","param","rootRef","disabled","isDisabled","visible","setVisible","useState","elementRef","useRef","setElement","useCallback","current","useEffect","tagName","idleCallback","requestIdleCallback","cancelIdleCallback","resetVisible"],"sources":["../../src/client/use-intersection.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}