{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  getRouteRegex: null,\n  getNamedRouteRegex: null,\n  getNamedMiddlewareRegex: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  getRouteRegex: function () {\n    return getRouteRegex;\n  },\n  getNamedRouteRegex: function () {\n    return getNamedRouteRegex;\n  },\n  getNamedMiddlewareRegex: function () {\n    return getNamedMiddlewareRegex;\n  }\n});\nconst _interceptionroutes = require(\"../../../../server/future/helpers/interception-routes\");\nconst _escaperegexp = require(\"../../escape-regexp\");\nconst _removetrailingslash = require(\"./remove-trailing-slash\");\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst NEXT_INTERCEPTION_MARKER_PREFIX = \"nxtI\";\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n */\nfunction parseParameter(param) {\n  const optional = param.startsWith(\"[\") && param.endsWith(\"]\");\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n  const repeat = param.startsWith(\"...\");\n  if (repeat) {\n    param = param.slice(3);\n  }\n  return {\n    key: param,\n    repeat,\n    optional\n  };\n}\nfunction getParametrizedRoute(route) {\n  const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n  const groups = {};\n  let groupIndex = 1;\n  return {\n    parameterizedRoute: segments.map(segment => {\n      const markerMatch = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find(m => segment.startsWith(m));\n      const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n      ;\n\n      if (markerMatch && paramMatches) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(paramMatches[1]);\n        groups[key] = {\n          pos: groupIndex++,\n          repeat,\n          optional\n        };\n        return \"/\" + (0, _escaperegexp.escapeStringRegexp)(markerMatch) + \"([^/]+?)\";\n      } else if (paramMatches) {\n        const {\n          key,\n          repeat,\n          optional\n        } = parseParameter(paramMatches[1]);\n        groups[key] = {\n          pos: groupIndex++,\n          repeat,\n          optional\n        };\n        return repeat ? optional ? \"(?:/(.+?))?\" : \"/(.+?)\" : \"/([^/]+?)\";\n      } else {\n        return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n      }\n    }).join(\"\"),\n    groups\n  };\n}\nfunction getRouteRegex(normalizedRoute) {\n  const {\n    parameterizedRoute,\n    groups\n  } = getParametrizedRoute(normalizedRoute);\n  return {\n    re: new RegExp(\"^\" + parameterizedRoute + \"(?:/)?$\"),\n    groups: groups\n  };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  let i = 0;\n  return () => {\n    let routeKey = \"\";\n    let j = ++i;\n    while (j > 0) {\n      routeKey += String.fromCharCode(97 + (j - 1) % 26);\n      j = Math.floor((j - 1) / 26);\n    }\n    return routeKey;\n  };\n}\nfunction getSafeKeyFromSegment(param) {\n  let {\n    interceptionMarker,\n    getSafeRouteKey,\n    segment,\n    routeKeys,\n    keyPrefix\n  } = param;\n  const {\n    key,\n    optional,\n    repeat\n  } = parseParameter(segment);\n  // replace any non-word characters since they can break\n  // the named regex\n  let cleanedKey = key.replace(/\\W/g, \"\");\n  if (keyPrefix) {\n    cleanedKey = \"\" + keyPrefix + cleanedKey;\n  }\n  let invalidKey = false;\n  // check if the key is still invalid and fallback to using a known\n  // safe key\n  if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n    invalidKey = true;\n  }\n  if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n    invalidKey = true;\n  }\n  if (invalidKey) {\n    cleanedKey = getSafeRouteKey();\n  }\n  if (keyPrefix) {\n    routeKeys[cleanedKey] = \"\" + keyPrefix + key;\n  } else {\n    routeKeys[cleanedKey] = key;\n  }\n  // if the segment has an interception marker, make sure that's part of the regex pattern\n  // this is to ensure that the route with the interception marker doesn't incorrectly match\n  // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n  const interceptionPrefix = interceptionMarker ? (0, _escaperegexp.escapeStringRegexp)(interceptionMarker) : \"\";\n  return repeat ? optional ? \"(?:/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?))?\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?)\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">[^/]+?)\";\n}\nfunction getNamedParametrizedRoute(route, prefixRouteKeys) {\n  const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n  const getSafeRouteKey = buildGetSafeRouteKey();\n  const routeKeys = {};\n  return {\n    namedParameterizedRoute: segments.map(segment => {\n      const hasInterceptionMarker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.some(m => segment.startsWith(m));\n      const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n      ;\n\n      if (hasInterceptionMarker && paramMatches) {\n        const [usedMarker] = segment.split(paramMatches[0]);\n        return getSafeKeyFromSegment({\n          getSafeRouteKey,\n          interceptionMarker: usedMarker,\n          segment: paramMatches[1],\n          routeKeys,\n          keyPrefix: prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n        });\n      } else if (paramMatches) {\n        return getSafeKeyFromSegment({\n          getSafeRouteKey,\n          segment: paramMatches[1],\n          routeKeys,\n          keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined\n        });\n      } else {\n        return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n      }\n    }).join(\"\"),\n    routeKeys\n  };\n}\nfunction getNamedRouteRegex(normalizedRoute, prefixRouteKey) {\n  const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey);\n  return {\n    ...getRouteRegex(normalizedRoute),\n    namedRegex: \"^\" + result.namedParameterizedRoute + \"(?:/)?$\",\n    routeKeys: result.routeKeys\n  };\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n  const {\n    parameterizedRoute\n  } = getParametrizedRoute(normalizedRoute);\n  const {\n    catchAll = true\n  } = options;\n  if (parameterizedRoute === \"/\") {\n    let catchAllRegex = catchAll ? \".*\" : \"\";\n    return {\n      namedRegex: \"^/\" + catchAllRegex + \"$\"\n    };\n  }\n  const {\n    namedParameterizedRoute\n  } = getNamedParametrizedRoute(normalizedRoute, false);\n  let catchAllGroupedRegex = catchAll ? \"(?:(/.*)?)\" : \"\";\n  return {\n    namedRegex: \"^\" + namedParameterizedRoute + catchAllGroupedRegex + \"$\"\n  };\n}","map":{"version":3,"mappings":"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","names":["getRouteRegex","getNamedRouteRegex","getNamedMiddlewareRegex","NEXT_QUERY_PARAM_PREFIX","NEXT_INTERCEPTION_MARKER_PREFIX","parseParameter","param","optional","startsWith","endsWith","slice","repeat","key","getParametrizedRoute","route","segments","removeTrailingSlash","split","groups","groupIndex","parameterizedRoute","map","segment","markerMatch","INTERCEPTION_ROUTE_MARKERS","find","m","paramMatches","match","pos","escapeStringRegexp","join","normalizedRoute","re","RegExp","buildGetSafeRouteKey","i","routeKey","j","String","fromCharCode","Math","floor","getSafeKeyFromSegment","interceptionMarker","getSafeRouteKey","routeKeys","keyPrefix","cleanedKey","replace","invalidKey","length","isNaN","parseInt","interceptionPrefix","getNamedParametrizedRoute","prefixRouteKeys","namedParameterizedRoute","hasInterceptionMarker","some","usedMarker","undefined","prefixRouteKey","result","namedRegex","options","catchAll","catchAllRegex","catchAllGroupedRegex"],"sources":["../../../../../src/shared/lib/router/utils/route-regex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}